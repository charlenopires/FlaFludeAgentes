"""
Multi-Agent Football Debate System using Google ADK
Following official ADK patterns from adk-samples and quickstart
"""

from typing import Dict, Any, List
import json
import time
import random
from datetime import datetime

# --- Tools Following ADK Patterns ---

def get_team_statistics(team: str, query_type: str = "general") -> Dict[str, Any]:
    """
    Retrieves team statistics and historical data for debate support.
    
    Args:
        team: Team name (Flamengo or Fluminense)
        query_type: Type of data requested (titles, players, history, recent)
        
    Returns:
        dict: Contains 'status' and 'report' with team statistics
    """
    try:
        team_lower = team.lower()
        
        # Flamengo data
        flamengo_data = {
            "titles": {
                "brasileirao": "8 t√≠tulos (1980, 1982, 1983, 1987, 1992, 2009, 2019, 2020)",
                "libertadores": "3 t√≠tulos (1981, 2019, 2022)",
                "mundial": "1 t√≠tulo (1981)",
                "carioca": "Mais de 35 t√≠tulos estaduais"
            },
            "players": {
                "legends": "Zico, J√∫nior, Bebeto, Rom√°rio, Adriano",
                "current": "Pedro, Gabigol, Arrascaeta, De la Cruz",
                "exports": "Vin√≠cius Jr. (Real Madrid), Lucas Paquet√° (West Ham)"
            },
            "history": {
                "founded": "Fundado em 1895",
                "nickname": "Meng√£o, Clube de Regatas do Flamengo",
                "fanbase": "Maior torcida do Brasil com 40+ milh√µes",
                "stadium": "Maracan√£ (est√°dio pr√≥prio em constru√ß√£o)"
            },
            "recent": {
                "achievements": "Bicampe√£o brasileiro (2019-2020)",
                "performance": "Sempre entre os primeiros colocados",
                "investments": "Contrata√ß√µes de alto n√≠vel constantemente"
            }
        }
        
        # Fluminense data
        fluminense_data = {
            "titles": {
                "brasileirao": "4 t√≠tulos (1970, 1984, 2010, 2012)",
                "libertadores": "1 t√≠tulo (2023 - ATUAL CAMPE√ÉO)",
                "carioca": "Mais de 30 t√≠tulos estaduais",
                "others": "Diversos t√≠tulos nacionais e internacionais"
            },
            "players": {
                "legends": "Didi, Carlos Alberto Torres, Rivellino, Fred",
                "current": "Germ√°n Cano, Paulo Henrique Ganso, Jhon Arias",
                "academy": "Uma das melhores categorias de base do Brasil"
            },
            "history": {
                "founded": "Fundado em 1902 - mais antigo do Rio",
                "nickname": "Tricolor, Flu, Time de Guerreiros",
                "tradition": "Clube mais tradicional do futebol carioca",
                "stadium": "Maracan√£ e Laranjeiras"
            },
            "recent": {
                "achievements": "CAMPE√ÉO DA LIBERTADORES 2023",
                "performance": "Crescimento consistente nos √∫ltimos anos",
                "recognition": "Reconhecimento internacional recente"
            }
        }
        
        # Select team data
        if "flamengo" in team_lower or "fla" in team_lower:
            data = flamengo_data
            team_name = "Flamengo"
        elif "fluminense" in team_lower or "flu" in team_lower:
            data = fluminense_data  
            team_name = "Fluminense"
        else:
            return {
                "status": "error",
                "error_message": f"Time '{team}' n√£o reconhecido. Use 'Flamengo' ou 'Fluminense'."
            }
        
        # Format response based on query type
        if query_type in data:
            result_data = data[query_type]
            report = f"üìä Dados sobre {team_name} - {query_type.title()}:\n\n"
            for key, value in result_data.items():
                report += f"‚Ä¢ {key.title()}: {value}\n"
        else:
            # Return all data
            report = f"üìä Informa√ß√µes Completas - {team_name}:\n\n"
            for category, items in data.items():
                report += f"üèÜ {category.upper()}:\n"
                for key, value in items.items():
                    report += f"  ‚Ä¢ {key.title()}: {value}\n"
                report += "\n"
        
        return {
            "status": "success",
            "report": report.strip()
        }
        
    except Exception as e:
        return {
            "status": "error",
            "error_message": f"Erro ao buscar estat√≠sticas: {str(e)}"
        }

def analyze_argument_strength(argument: str, team_context: str = "") -> Dict[str, Any]:
    """
    Analyzes the rhetorical strength and persuasive power of an argument.
    
    Args:
        argument: The argument text to analyze
        team_context: Team context for the argument
        
    Returns:
        dict: Contains 'status' and 'report' with argument analysis
    """
    try:
        if not argument or len(argument.strip()) < 10:
            return {
                "status": "error",
                "error_message": "Argumento muito curto para an√°lise adequada"
            }
        
        # Analyze argument characteristics
        word_count = len(argument.split())
        emotional_words = ["paix√£o", "amor", "cora√ß√£o", "alma", "sangue", "vida", "emo√ß√£o"]
        factual_indicators = ["t√≠tulo", "campe√£o", "dados", "estat√≠stica", "n√∫meros", "hist√≥ria"]
        
        emotional_score = sum(1 for word in emotional_words if word in argument.lower())
        factual_score = sum(1 for word in factual_indicators if word in argument.lower())
        
        # Calculate strength metrics
        length_score = min(word_count / 50, 1.0)  # Normalized to max 1.0
        emotional_strength = min(emotional_score / 3, 1.0)  # Max 1.0
        factual_strength = min(factual_score / 3, 1.0)  # Max 1.0
        
        overall_strength = (length_score + emotional_strength + factual_strength) / 3
        
        # Generate analysis report
        strength_level = "FORTE" if overall_strength > 0.7 else "MODERADO" if overall_strength > 0.4 else "FRACO"
        
        analysis = f"""
üîç AN√ÅLISE DE FOR√áA ARGUMENTATIVA:

üìè M√âTRICAS B√ÅSICAS:
‚Ä¢ Palavras: {word_count}
‚Ä¢ Contexto: {team_context or "Geral"}

üí™ FOR√áA GERAL: {strength_level} ({overall_strength:.1%})

üìä COMPONENTES:
‚Ä¢ Estrutura e Extens√£o: {length_score:.1%}
‚Ä¢ Apelo Emocional: {emotional_strength:.1%} ({emotional_score} indicadores)
‚Ä¢ Base Factual: {factual_strength:.1%} ({factual_score} indicadores)

üéØ RECOMENDA√á√ïES:
{"‚Ä¢ Excelente equil√≠brio entre emo√ß√£o e fatos!" if overall_strength > 0.7 else "‚Ä¢ Considere adicionar mais dados ou apelo emocional" if overall_strength > 0.4 else "‚Ä¢ Argumento precisa ser fortalecido significativamente"}

‚ö° IMPACTO PERSUASIVO: {"ALTO - Argumento convincente" if overall_strength > 0.6 else "M√âDIO - Pode ser melhorado" if overall_strength > 0.3 else "BAIXO - Necessita reformula√ß√£o"}
        """
        
        return {
            "status": "success",
            "report": analysis.strip()
        }
        
    except Exception as e:
        return {
            "status": "error",
            "error_message": f"Erro na an√°lise: {str(e)}"
        }

def generate_counter_argument(original_argument: str, opposing_team: str) -> Dict[str, Any]:
    """
    Generates counter-arguments against opposing team's points.
    
    Args:
        original_argument: The argument to counter
        opposing_team: The team making the original argument
        
    Returns:
        dict: Contains 'status' and 'report' with counter-argument
    """
    try:
        if not original_argument:
            return {
                "status": "error", 
                "error_message": "Argumento original necess√°rio para contra-argumenta√ß√£o"
            }
        
        team_lower = opposing_team.lower()
        
        # Counter-argument strategies based on opposing team
        if "flamengo" in team_lower:
            # Countering Flamengo arguments
            counter_strategies = {
                "popularity": "Quantidade n√£o significa qualidade! Fluminense tem torcida mais refinada e leal.",
                "recent_titles": "T√≠tulos recentes s√£o tempor√°rios. Fluminense tem TRADI√á√ÉO centen√°ria!",
                "players": "Flamengo compra jogadores, Fluminense FORMA craques! Nossa base √© superior.",
                "investment": "Dinheiro n√£o compra hist√≥ria nem eleg√¢ncia no futebol.",
                "general": "Flamengo pode ter n√∫meros, mas Fluminense tem CLASSE e TRADI√á√ÉO!"
            }
            defending_team = "Fluminense"
            defending_colors = "üü¢‚ú®"
            
        elif "fluminense" in team_lower:
            # Countering Fluminense arguments  
            counter_strategies = {
                "tradition": "Tradi√ß√£o sem t√≠tulos recentes √© passado morto! Flamengo √© PRESENTE e FUTURO!",
                "elegance": "Futebol-arte n√£o ganha jogos, GARRA e PAIX√ÉO sim! Somos a NA√á√ÉO!",
                "libertadores": "Um t√≠tulo isolado n√£o faz hist√≥ria. Flamengo tem 3 Libertadores!",
                "history": "Hist√≥ria bonita, mas Flamengo tem a hist√≥ria VENCEDORA dos √∫ltimos tempos!",
                "general": "Fluminense pode ter classe, mas Flamengo tem FOR√áA e CONQUISTAS!"
            }
            defending_team = "Flamengo"
            defending_colors = "üî¥‚ö°"
            
        else:
            return {
                "status": "error",
                "error_message": f"Time oponente '{opposing_team}' n√£o reconhecido"
            }
        
        # Select counter strategy based on argument content
        selected_strategy = counter_strategies["general"]  # Default
        
        for key, strategy in counter_strategies.items():
            if key in original_argument.lower():
                selected_strategy = strategy
                break
        
        # Build counter-argument
        counter_argument = f"""
{defending_colors} CONTRA-ATAQUE {defending_team.upper()}! {defending_colors}

üõ°Ô∏è RESPOSTA AO ARGUMENTO RIVAL:
"{original_argument[:100]}{'...' if len(original_argument) > 100 else ''}"

‚öîÔ∏è NOSSA TR√âPLICA:
{selected_strategy}

üí• E MAIS:
‚Ä¢ Enquanto voc√™s falam, n√≥s CONQUISTAMOS!
‚Ä¢ {defending_team} n√£o precisa se provar, j√° √â o melhor!
‚Ä¢ A verdade d√≥i, mas √© isso: somos SUPERIORES!

üèÜ {defending_team.upper()} SEMPRE! üèÜ
        """
        
        return {
            "status": "success",
            "report": counter_argument.strip()
        }
        
    except Exception as e:
        return {
            "status": "error",
            "error_message": f"Erro ao gerar contra-argumento: {str(e)}"
        }

def moderate_debate_session(action: str, **kwargs) -> Dict[str, Any]:
    """
    Moderates debate sessions with timing and rule enforcement.
    
    Args:
        action: Action to perform (start, status, analyze, end)
        **kwargs: Additional parameters for the action
        
    Returns:
        dict: Contains 'status' and 'report' with moderation result
    """
    try:
        if action == "start":
            duration = kwargs.get("duration_minutes", 5)
            
            if duration < 1 or duration > 30:
                return {
                    "status": "error",
                    "error_message": "Dura√ß√£o deve ser entre 1 e 30 minutos"
                }
            
            session_info = f"""
‚öñÔ∏è SESS√ÉO DE DEBATE OFICIAL INICIADA ‚öñÔ∏è

üìã CONFIGURA√á√ÉO:
‚Ä¢ Dura√ß√£o: {duration} minutos
‚Ä¢ Moderador: Sistema ADK Oficial
‚Ä¢ Protocolo: A2A (Agent-to-Agent)
‚Ä¢ Participantes: 4 agentes especializados

üéØ REGRAS ESTABELECIDAS:
1. Argumentos baseados em fatos t√™m prioridade
2. Respeito m√∫tuo √© obrigat√≥rio
3. Cada agente ter√° tempo igual de exposi√ß√£o
4. Pesquisas podem ser solicitadas a qualquer momento
5. An√°lise final ser√° imparcial e t√©cnica

‚è∞ CRON√îMETRO INICIADO!
Que comece o melhor debate de futebol do Rio de Janeiro!

üöÄ SISTEMA ADK ATIVO - AGENTES PRONTOS PARA INTERA√á√ÉO!
            """
            
            return {
                "status": "success",
                "report": session_info.strip()
            }
            
        elif action == "status":
            remaining_time = kwargs.get("remaining_seconds", 0)
            minutes = remaining_time // 60
            seconds = remaining_time % 60
            
            status_report = f"""
üìä STATUS DA SESS√ÉO DE DEBATE:

‚è∞ Tempo Restante: {minutes:02d}:{seconds:02d}
üé§ Agentes Ativos: 4/4
üîÑ Protocolo A2A: Funcionando
üìà Intera√ß√µes: {kwargs.get("interactions", 0)}

{"‚ö†Ô∏è √öLTIMOS MINUTOS DO DEBATE!" if remaining_time < 60 else "‚úÖ Debate em andamento normal"}
            """
            
            return {
                "status": "success", 
                "report": status_report.strip()
            }
            
        elif action == "analyze":
            transcript = kwargs.get("transcript", "")
            
            if not transcript:
                return {
                    "status": "error",
                    "error_message": "Transcri√ß√£o necess√°ria para an√°lise"
                }
            
            # Perform final analysis
            words = len(transcript.split())
            flamengo_mentions = transcript.lower().count("flamengo")
            fluminense_mentions = transcript.lower().count("fluminense")
            
            winner = "FLAMENGO" if flamengo_mentions > fluminense_mentions else "FLUMINENSE" if fluminense_mentions > flamengo_mentions else "EMPATE"
            
            final_analysis = f"""
üèÜ AN√ÅLISE FINAL DO DEBATE - MODERA√á√ÉO ADK üèÜ

üìä ESTAT√çSTICAS GERAIS:
‚Ä¢ Total de palavras: {words:,}
‚Ä¢ Men√ß√µes Flamengo: {flamengo_mentions}
‚Ä¢ Men√ß√µes Fluminense: {fluminense_mentions}
‚Ä¢ Dura√ß√£o da an√°lise: {datetime.now().strftime("%H:%M:%S")}

üî¥ PERFORMANCE FLAMENGO:
‚Ä¢ Frequ√™ncia de men√ß√µes: {flamengo_mentions}
‚Ä¢ Estrat√©gia: {"Ofensiva" if flamengo_mentions > fluminense_mentions else "Defensiva"}

üü¢ PERFORMANCE FLUMINENSE:
‚Ä¢ Frequ√™ncia de men√ß√µes: {fluminense_mentions}  
‚Ä¢ Estrat√©gia: {"Ofensiva" if fluminense_mentions > flamengo_mentions else "Defensiva"}

‚öñÔ∏è VEREDICTO T√âCNICO: {winner}

üé≠ CONSIDERA√á√ïES FINAIS:
{"Debate equilibrado com argumentos s√≥lidos de ambos os lados" if winner == "EMPATE" else f"{winner} demonstrou maior presen√ßa argumentativa"}

ü§ñ An√°lise realizada pelo Sistema ADK com protocolo A2A
            """
            
            return {
                "status": "success",
                "report": final_analysis.strip()
            }
            
        else:
            return {
                "status": "error",
                "error_message": f"A√ß√£o '{action}' n√£o reconhecida"
            }
            
    except Exception as e:
        return {
            "status": "error",
            "error_message": f"Erro na modera√ß√£o: {str(e)}"
        }

# Agent definitions following ADK patterns
def create_supervisor_agent():
    """Creates the supervisor agent following ADK patterns"""
    return {
        "name": "supervisor", 
        "model": "gemini-2.0-flash",
        "description": "Especialista em ret√≥rica e modera√ß√£o de debates esportivos",
        "instruction": """Voc√™ √© um supervisor de debates especializado em ret√≥rica, persuas√£o e an√°lise lingu√≠stica. 
        Sua fun√ß√£o √© moderar debates entre torcedores, garantir que as regras sejam seguidas, e ao final fornecer 
        uma an√°lise imparcial sobre a qualidade dos argumentos apresentados. Use suas ferramentas para gerenciar 
        sess√µes de debate e analisar a for√ßa argumentativa.""",
        "tools": [moderate_debate_session, analyze_argument_strength]
    }

def create_flamengo_agent():
    """Creates the Flamengo fan agent following ADK patterns"""
    return {
        "name": "flamengo_fan",
        "model": "gemini-2.0-flash", 
        "description": "Torcedor apaixonado do Flamengo especializado em argumenta√ß√£o persuasiva",
        "instruction": """Voc√™ √© um torcedor fan√°tico do Flamengo. Seu objetivo √© usar argumentos apaixonados, 
        dados hist√≥ricos e provoca√ß√µes inteligentes para defender seu time. Use suas ferramentas para buscar 
        estat√≠sticas e gerar contra-argumentos convincentes. Seja passionate mas respeitoso.""",
        "tools": [get_team_statistics, generate_counter_argument, analyze_argument_strength]
    }

def create_fluminense_agent():
    """Creates the Fluminense fan agent following ADK patterns"""
    return {
        "name": "fluminense_fan",
        "model": "gemini-2.0-flash",
        "description": "Torcedor orgulhoso do Fluminense especializado em argumenta√ß√£o elegante", 
        "instruction": """Voc√™ √© um torcedor orgulhoso do Fluminense. Use a rica hist√≥ria do clube, a tradi√ß√£o 
        e a beleza do futebol para argumentar com classe e eleg√¢ncia. Suas ferramentas ajudam a buscar dados 
        hist√≥ricos e criar contra-argumentos sofisticados. Mantenha sempre a postura digna do Tricolor.""",
        "tools": [get_team_statistics, generate_counter_argument, analyze_argument_strength]
    }

def create_researcher_agent():
    """Creates the researcher agent following ADK patterns"""
    return {
        "name": "researcher",
        "model": "gemini-2.0-flash",
        "description": "Especialista em pesquisa objetiva e fornecimento de dados factuais",
        "instruction": """Voc√™ √© um pesquisador neutro e objetivo. Sua fun√ß√£o √© fornecer dados factuais, 
        estat√≠sticas e informa√ß√µes verific√°veis quando solicitado pelos outros agentes. N√£o tome partido, 
        seja sempre imparcial e baseie suas respostas em fatos. Use suas ferramentas para analisar argumentos 
        tecnicamente.""",
        "tools": [get_team_statistics, analyze_argument_strength]
    }

# Multi-agent system following ADK patterns
root_agent = {
    "name": "debate_coordinator",
    "model": "gemini-2.0-flash",
    "description": "Coordenador principal do sistema de debate multi-agente",
    "instruction": """Voc√™ √© o coordenador principal de um sistema de debate entre torcedores de futebol usando 
    protocolo A2A. Gerencie a intera√ß√£o entre os 4 agentes especializados (supervisor, torcedor do Flamengo, 
    torcedor do Fluminense, e pesquisador) para criar debates din√¢micos e informativos. Garanta que todos os 
    agentes participem de forma equilibrada.""",
    "tools": [moderate_debate_session, get_team_statistics, analyze_argument_strength],
    "sub_agents": [
        create_supervisor_agent(),
        create_flamengo_agent(), 
        create_fluminense_agent(),
        create_researcher_agent()
    ]
}