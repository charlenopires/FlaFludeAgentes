"""
Flamengo Agent - Google ADK Implementation with A2A Protocol
Torcedor apaixonado do Flamengo com argumenta√ß√£o persuasiva
"""

import os
from typing import Dict, Any, List, Optional
from datetime import datetime
from google.adk.agents import LlmAgent
from google.adk.tools import FunctionTool
from dotenv import load_dotenv

# Carrega vari√°veis do .env
load_dotenv()

def create_flamengo_agent() -> LlmAgent:
    """
    Cria o Agente Torcedor do Flamengo seguindo padr√µes Google ADK
    Especializado em argumenta√ß√£o persuasiva com dados e paix√£o
    """
    
    # Tools para o torcedor do Flamengo usando FunctionTool do ADK
    def create_initial_argument_tool() -> str:
        """Cria argumento inicial sobre a superioridade do Flamengo"""
        try:
            argument = """üî¥ **FLAMENGO - ARGUMENTOS BASEADOS EM DADOS**

üìä **N√öMEROS PRINCIPAIS:**
‚Ä¢ 8 Brasileir√µes vs 4 do Fluminense (dobro de t√≠tulos nacionais)
‚Ä¢ 3 Libertadores (tricampe√£o continental)
‚Ä¢ Maior torcida do Brasil (43+ milh√µes de torcedores)
‚Ä¢ Mundial de 1981 com Zico (conquista hist√≥rica)

‚≠ê **DIFERENCIAL ATUAL:**
‚Ä¢ Estrutura moderna e investimentos
‚Ä¢ Elenco de alto n√≠vel internacional
‚Ä¢ Tradi√ß√£o vitoriosa mantida

[PESQUISA]estat√≠sticas recentes confrontos Fla-Flu[/PESQUISA]

A matem√°tica n√£o mente: somos superiores em t√≠tulos nacionais e continentais!"""
            
            return argument
            
        except Exception as e:
            return f"üî¥ Erro na paix√£o rubro-negra: {str(e)}"
    
    def create_counter_argument_tool(opponent_message: str) -> str:
        """Cria contra-argumento devastador contra o Fluminense"""
        try:
            # Extrai pontos principais do oponente (simplificado)
            opponent_preview = opponent_message[:60] + "..." if len(opponent_message) > 60 else opponent_message
            
            counter_arg = f"""üî¥ **FLAMENGO - CONTRA-ARGUMENTO**

Rival argumentou: "{opponent_preview}"

üìä **RESPOSTA COM DADOS:**
‚Ä¢ Brasileir√µes: 8 vs 4 (vantagem Flamengo)
‚Ä¢ Libertadores: 3 vs 1 (tricampe√£o vs monocampe√£o)
‚Ä¢ Torcida: Maior do Brasil vs torcida regional
‚Ä¢ Estrutura: Maior or√ßamento e investimentos

üí™ **REALIDADE ATUAL:**
N√∫meros comprovam nossa superioridade hist√≥rica e atual.

[PESQUISA]compara√ß√£o or√ßamentos Flamengo vs Fluminense[/PESQUISA]

Os fatos s√£o incontest√°veis: somos MAIORES em tudo!"""
            
            return counter_arg
            
        except Exception as e:
            return f"üî¥ Erro no contra-ataque: {str(e)}"
    
    def request_research_tool(query: str) -> str:
        """Solicita dados espec√≠ficos ao pesquisador"""
        try:
            research_request = f"""üìä **SOLICITA√á√ÉO DE PESQUISA**

üîç **Consulta:** {query}
üìã **Solicitante:** Torcedor do Flamengo
‚è∞ **Timestamp:** {datetime.now().strftime('%H:%M:%S')}

üéØ **Objetivo:** Embasar argumenta√ß√£o com dados factuais
‚úÖ **Status:** Enviado ao agente pesquisador"""
            
            return research_request
            
        except Exception as e:
            return f"üî¥ Erro na solicita√ß√£o: {str(e)}"
    
    # Instru√ß√µes detalhadas para o torcedor do Flamengo
    flamengo_instruction = """
    üî¥ **VOC√ä √â UM TORCEDOR APAIXONADO DO FLAMENGO** üî¥
    
    üéØ SUA MISS√ÉO:
    1. Defender o Flamengo com PAIX√ÉO e DADOS factuais
    2. Usar argumentos emocionais E estat√≠sticas verific√°veis
    3. Solicitar pesquisas quando necess√°rio com [PESQUISA]pergunta[/PESQUISA]
    4. Ser convincente mas sempre respeitoso
    5. Focar nos n√∫meros que comprovam superioridade
    
    üìä SEUS PRINCIPAIS ARGUMENTOS:
    - 8 Brasileir√µes (mais t√≠tulos nacionais que qualquer rival carioca)
    - 3 Libertadores (tricampe√£o continental)
    - Maior torcida do Brasil (43+ milh√µes)
    - Mundial de 1981 hist√≥rico
    - Estrutura e investimentos superiores
    - Tradi√ß√£o vitoriosa mantida
    
    üé≠ SEU ESTILO:
    - Tom apaixonado mas respeitoso
    - Use emojis do Flamengo: üî¥‚ö°üèÜ
    - Seja convincente com dados concretos
    - Misture emo√ß√£o com estat√≠sticas
    - Sempre solicite pesquisas para embasar argumentos
    
    ‚öñÔ∏è REGRAS IMPORTANTES:
    - Use sempre dados factuais verific√°veis
    - Seja respeitoso com o rival
    - Foque na qualidade dos argumentos
    - Solicite pesquisas com [PESQUISA]sua pergunta[/PESQUISA]
    
    FERRAMENTAS DISPON√çVEIS:
    - create_initial_argument_tool: Para argumento inicial
    - create_counter_argument_tool: Para rebater o rival
    - request_research_tool: Para solicitar dados espec√≠ficos
    
    üî• LEMBRE-SE: Use dados e paix√£o para mostrar nossa grandeza!
    """
    
    # Cria ferramentas usando FunctionTool do ADK
    initial_argument_function = FunctionTool(create_initial_argument_tool)
    counter_argument_function = FunctionTool(create_counter_argument_tool)
    request_research_function = FunctionTool(request_research_tool)
    
    # Cria o agente usando Google ADK LlmAgent
    flamengo_agent = LlmAgent(
        name="flamengo_agent",
        model="gemini-2.0-flash", 
        description="Torcedor apaixonado do Flamengo especializado em argumenta√ß√£o persuasiva com dados e emo√ß√£o",
        instruction=flamengo_instruction,
        tools=[initial_argument_function, counter_argument_function, request_research_function]
    )
    
    return flamengo_agent


if __name__ == "__main__":
    """Executa o agente Flamengo usando Flask e A2A Protocol"""
    from flask import Flask, request, jsonify
    
    # Cria o agente ADK
    flamengo = create_flamengo_agent()
    
    # Cria aplica√ß√£o Flask
    app = Flask(__name__)
    
    @app.route('/.well-known/agent.json', methods=['GET'])
    def agent_card():
        """Agent Card conforme A2A Protocol especifica√ß√£o"""
        card = {
            "name": flamengo.name,
            "description": flamengo.description,
            "version": "1.0.0",
            "protocol": "A2A",
            "capabilities": ["persuasive_argumentation", "statistical_analysis", "fan_advocacy"],
            "skills": [
                {
                    "name": "create_initial_argument",
                    "description": "Cria argumento inicial sobre a superioridade do Flamengo"
                },
                {
                    "name": "create_counter_argument",
                    "description": "Cria contra-argumento devastador contra o Fluminense"
                },
                {
                    "name": "request_research",
                    "description": "Solicita dados espec√≠ficos ao pesquisador"
                }
            ],
            "endpoints": {
                "run": "/run"
            }
        }
        return jsonify(card)
    
    @app.route('/run', methods=['POST'])
    def run_agent():
        """Endpoint para executar o agente via A2A Protocol"""
        try:
            data = request.get_json()
            prompt = data.get('prompt', data.get('message', ''))
            
            # Executa o agente ADK
            response = ""
            for chunk in flamengo.run(prompt):
                if isinstance(chunk, str):
                    response += chunk
                elif hasattr(chunk, 'content'):
                    response += chunk.content
            
            return jsonify({"response": response})
            
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    
    print("ü§ñüî¥ Flamengo Agent A2A Server iniciando na porta 8003...")
    print("Agent Card dispon√≠vel em: http://localhost:8003/.well-known/agent.json")
    
    # Inicia servidor Flask
    app.run(host="0.0.0.0", port=8003, debug=False)