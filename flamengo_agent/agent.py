"""
Flamengo Agent - Google ADK + A2A Protocol Implementation
Torcedor apaixonado do Flamengo com argumenta√ß√£o persuasiva
"""

import os
import time
import json
import asyncio
from typing import Dict, Any, List, Optional
from datetime import datetime
from uuid import uuid4
import google.generativeai as genai
from dotenv import load_dotenv

# Carrega vari√°veis do .env
load_dotenv()

class FlamengoAgent:
    """
    Agente Torcedor Flamengo seguindo padr√µes A2A v1.0
    Especializado em argumenta√ß√£o persuasiva e defesa apaixonada
    """
    
    def __init__(self):
        self.agent_id = "flamengo_agent"
        self.name = "Torcedor do Flamengo"
        self.version = "1.0.0"
        self.description = "Torcedor apaixonado do Flamengo especializado em argumenta√ß√£o persuasiva com dados e emo√ß√£o"
        
        # Configura√ß√£o Google ADK
        self.model = "gemini-2.0-flash"
        self.api_key = os.getenv('GOOGLE_API_KEY')
        
        # Estado do agente
        self.active = False
        self.debate_active = False
        self.my_turn = False
        self.time_allocated = 0
        
        # Hist√≥rico A2A
        self.a2a_messages = []
        self.conversation_history = []
        
        # Inicializa cliente Gemini
        if self.api_key:
            genai.configure(api_key=self.api_key)
            self.client = genai.GenerativeModel(self.model)
        else:
            self.client = None
        
        # Texto persuasivo inicial (reduzido)
        self.persuasion_text = """
        üî¥‚ö° **FLAMENGO - A NA√á√ÉO RUBRO-NEGRA** ‚ö°üî¥
        
        Maior clube do Brasil com 43 milh√µes de torcedores!
        
        üèÜ **T√çTULOS PRINCIPAIS:**
        ‚Ä¢ 8 Brasileir√µes ‚Ä¢ 3 Libertadores ‚Ä¢ 1 Mundial ‚Ä¢ 37 Cariocas
        
        ‚≠ê De Zico a Vin√≠cius Jr., formamos estrelas mundiais!
        üí™ Maior torcida, estrutura e paix√£o do pa√≠s!
        """
        
        # System prompt especializado
        self.system_prompt = f"""
        {self.persuasion_text}
        
        üî¥ VOC√ä √â UM TORCEDOR FAN√ÅTICO DO FLAMENGO! üî¥
        
        üéØ SUA MISS√ÉO:
        1. Defender o Flamengo com PAIX√ÉO e DADOS irrefut√°veis
        2. Usar argumentos emocionais E factuais devastadores
        3. Provocar o rival Fluminense com intelig√™ncia e classe
        4. Solicitar dados ao pesquisador quando necess√°rio (use "PESQUISADOR:")
        5. NUNCA admitir derrota - somos SUPERIORES em tudo!
        
        üìä SUAS ARMAS ARGUMENTATIVAS:
        - Maior torcida do Brasil (43+ milh√µes)
        - Mais t√≠tulos brasileiros que qualquer rival carioca
        - Tricampe√£o da Libertadores
        - Campe√£o Mundial de 1981
        - Revela√ß√£o de craques mundiais
        - Maior estrutura e investimento
        
        üé≠ SEU ESTILO:
        - Tom apaixonado mas respeitoso
        - Use emojis do Flamengo: üî¥‚ö°üèÜüî•
        - Seja convincente e demolidor
        - Misture emo√ß√£o com dados concretos
        - Mantenha sempre a superioridade rubro-negra
        
        üî• LEMBRE-SE: Somos a NA√á√ÉO! Somos MAIORES! Somos FLAMENGO!
        """
    
    def get_agent_card(self) -> Dict[str, Any]:
        """
        Retorna Agent Card seguindo especifica√ß√£o A2A v1.0
        """
        return {
            "name": self.name,
            "description": self.description,
            "url": f"http://localhost:8001/{self.agent_id}",
            "provider": {
                "organization": "Fla-Flu Debate System",
                "url": "https://github.com/a2aproject/flafludeagentes"
            },
            "version": self.version,
            "capabilities": {
                "streaming": True,
                "pushNotifications": True,
                "stateTransitionHistory": True
            },
            "securitySchemes": {
                "none": {
                    "type": "none"
                }
            },
            "security": [],
            "defaultInputModes": ["text/plain"],
            "defaultOutputModes": ["text/plain", "text/markdown"],
            "skills": [
                {
                    "id": "initial_argument",
                    "name": "Argumento Inicial",
                    "description": "Apresenta argumento inicial demolidor sobre superioridade do Flamengo",
                    "tags": ["debate", "flamengo", "persuasion"],
                    "examples": [
                        "Apresente seu argumento inicial",
                        "Por que o Flamengo √© superior?",
                        "Defenda seu time"
                    ],
                    "inputModes": ["text/plain"]
                },
                {
                    "id": "counter_argument",
                    "name": "Contra-argumento",
                    "description": "Gera contra-argumento devastador contra argumentos do Fluminense",
                    "tags": ["debate", "counter", "flamengo"],
                    "examples": [
                        "Rebata esse argumento",
                        "Contra-ataque essa afirma√ß√£o",
                        "Responda ao rival"
                    ],
                    "inputModes": ["text/plain"]
                },
                {
                    "id": "request_research",
                    "name": "Solicitar Pesquisa",
                    "description": "Solicita dados ao agente pesquisador para embasar argumentos",
                    "tags": ["research", "data", "support"],
                    "examples": [
                        "Preciso de dados sobre t√≠tulos",
                        "Busque estat√≠sticas da torcida",
                        "Encontre informa√ß√µes sobre jogadores"
                    ],
                    "inputModes": ["text/plain"]
                }
            ]
        }
    
    async def send_a2a_message(self, target_agent: str, method: str, params: Dict = None) -> Dict[str, Any]:
        """
        Envia mensagem A2A seguindo JSON-RPC 2.0
        """
        message = {
            "jsonrpc": "2.0",
            "id": str(uuid4()),
            "method": method,
            "params": params or {},
            "from_agent": self.agent_id,
            "to_agent": target_agent,
            "timestamp": datetime.now().isoformat(),
            "protocol": "A2A-v1.0"
        }
        
        # Log da comunica√ß√£o A2A
        self.a2a_messages.append(message)
        
        return {
            "jsonrpc": "2.0",
            "id": message["id"],
            "result": {
                "status": "message_sent",
                "target": target_agent,
                "method": method,
                "timestamp": message["timestamp"]
            }
        }
    
    async def process_a2a_message(self, message: Dict[str, Any]) -> Dict[str, Any]:
        """
        Processa mensagem A2A recebida
        """
        try:
            method = message.get("method")
            params = message.get("params", {})
            
            if method == "debate_started":
                result = await self.handle_debate_started(params)
            elif method == "debate_finished":
                result = await self.handle_debate_finished(params)
            elif method == "turn_notification":
                result = await self.handle_turn_notification(params)
            elif method == "research_response":
                result = await self.handle_research_response(params)
            elif method == "message/send":
                result = await self.handle_message_send(params)
            else:
                result = {
                    "status": "error",
                    "message": f"M√©todo desconhecido: {method}"
                }
            
            return {
                "jsonrpc": "2.0",
                "id": message.get("id"),
                "result": result
            }
            
        except Exception as e:
            return {
                "jsonrpc": "2.0",
                "id": message.get("id"),
                "error": {
                    "code": -32603,
                    "message": "Internal error",
                    "data": str(e)
                }
            }
    
    async def handle_debate_started(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        Lida com in√≠cio do debate
        """
        self.debate_active = True
        self.my_turn = params.get("your_turn", False)
        self.time_allocated = params.get("time_allocated", 150)  # 2.5 min default
        
        if self.my_turn:
            # √â minha vez de come√ßar!
            argument = await self.generate_initial_argument()
            return {
                "status": "turn_taken",
                "action": "initial_argument",
                "content": argument,
                "next_agent": "fluminense_agent"
            }
        else:
            return {
                "status": "waiting",
                "message": "üî¥ Flamengo aguardando sua vez de mostrar supremacia!"
            }
    
    async def handle_turn_notification(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        Lida com notifica√ß√£o de turno
        """
        self.my_turn = True
        opponent_argument = params.get("opponent_argument", "")
        research_data = params.get("research_data")
        
        # Gera contra-argumento
        counter_arg = await self.generate_counter_argument(opponent_argument, research_data)
        
        return {
            "status": "turn_taken",
            "action": "counter_argument", 
            "content": counter_arg,
            "next_agent": "fluminense_agent"
        }
    
    async def handle_research_response(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        Lida com resposta do pesquisador
        """
        research_data = params.get("data", "")
        query = params.get("original_query", "")
        
        # Incorpora dados na argumenta√ß√£o
        enhanced_argument = await self.enhance_argument_with_data(research_data, query)
        
        return {
            "status": "research_received",
            "enhanced_argument": enhanced_argument
        }
    
    async def handle_message_send(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        Lida com mensagem direta
        """
        message = params.get("message", {})
        text = ""
        
        # Extrai texto das partes da mensagem
        for part in message.get("parts", []):
            if part.get("kind") == "text":
                text += part.get("text", "")
        
        if not text:
            return {
                "status": "error",
                "message": "Mensagem vazia recebida"
            }
        
        # Processa mensagem e gera resposta
        response = await self.process_message(text)
        
        return {
            "status": "success",
            "response": {
                "role": "assistant",
                "parts": [
                    {
                        "kind": "text",
                        "text": response
                    }
                ],
                "messageId": str(uuid4())
            }
        }
    
    async def generate_initial_argument(self) -> str:
        """
        Gera argumento inicial demolidor - Skill A2A
        """
        try:
            # SEMPRE pede dados ao pesquisador primeiro
            research_data = await self.request_research_data("estat√≠sticas principais do Flamengo para argumenta√ß√£o inicial")
            
            if self.client:
                prompt = f"""
                {self.system_prompt}
                
                üî• ARGUMENTA√á√ÉO COM DADOS FRESCOS! üî•
                
                Dados do pesquisador:
                {research_data}
                
                Use esses dados para um argumento inicial CURTO (m√°ximo 300 palavras) sobre por que 
                o Flamengo √© SUPERIOR ao Fluminense.
                
                Seja:
                - DIRETO e DEVASTADOR com os dados
                - PROVOCATIVO mas respeitoso
                - Termine pedindo mais dados espec√≠ficos ao pesquisador
                
                Foque nos N√öMEROS que comprovam nossa superioridade!
                """
                
                response = self.client.generate_content(prompt)
                argument = response.text
            else:
                # SEMPRE pede dados ao pesquisador primeiro
                research_data = await self.request_research_data("estat√≠sticas principais do Flamengo para debate")
                
                argument = f"""
üî¥‚ö° **FLAMENGO: SUPERIORIDADE BASEADA EM DADOS!** ‚ö°üî¥

{research_data}

üí™ **MATEM√ÅTICA PURA:**
8 Brasileir√µes vs 4 do Fluminense = DOBRAMOS eles!
43 milh√µes vs 8 milh√µes de torcedores = 5x MAIORES!

üèÜ **TRICAMPE√ïES DA AM√âRICA** com 3 Libertadores!
üí∞ **R$ 1,2 bilh√£o** de receita anual comprova nossa for√ßa!

üî• **REALIDADE:** Os n√∫meros confirmam - SOMOS GIGANTES!

PESQUISADOR: Traga dados sobre confrontos diretos recentes Fla-Flu!
                """
            
            # Log da conversa
            self.conversation_history.append({
                "type": "initial_argument",
                "content": argument,
                "timestamp": time.time()
            })
            
            return argument
            
        except Exception as e:
            return f"üî¥ Erro na paix√£o rubro-negra: {str(e)}"
    
    async def generate_counter_argument(self, opponent_message: str, research_data: str = None) -> str:
        """
        Gera contra-argumento devastador - Skill A2A
        """
        try:
            # SEMPRE pede dados espec√≠ficos baseados no argumento do oponente
            research_query = f"dados para rebater este argumento do Fluminense: {opponent_message[:100]}..."
            fresh_research = await self.request_research_data(research_query)
            
            if self.client:
                prompt = f"""
                {self.system_prompt}
                
                ‚öîÔ∏è CONTRA-ATAQUE COM DADOS FRESCOS! ‚öîÔ∏è
                
                Fluminense argumentou: "{opponent_message[:200]}..."
                
                Dados frescos do pesquisador:
                {fresh_research}
                
                Crie uma resposta CURTA (m√°ximo 250 palavras) que:
                - Use os DADOS fornecidos para rebater
                - Seja PROVOCATIVO mas respeitoso
                - Termine pedindo novos dados espec√≠ficos ao pesquisador
                - Foque nos N√öMEROS que comprovam superioridade
                
                Seja direto e devastador com os FATOS!
                """
                
                response = self.client.generate_content(prompt)
                counter_arg = response.text
            else:
                counter_arg = f"""
üî¥‚ö° **RESPOSTA BASEADA EM DADOS!** ‚ö°üî¥

{fresh_research}

Fluminense argumentou: "{opponent_message[:80]}..."

üí• **FATOS QUE DERRUBAM VOC√äS:**
8 Brasileir√µes vs 4 = DOBRAMOS voc√™s em t√≠tulos nacionais!
43 milh√µes vs 8 milh√µes = 5x MAIS torcedores!
R$ 1,2 bi vs R$ 400mi = 3x MAIS receita!

üèÜ **MATEM√ÅTICA PURA:**
3 Libertadores vs 1 = TRICAMPE√ïES da Am√©rica!
Voc√™s: 1 conquista recente. N√≥s: HEGEMONIA TOTAL!

üî• **REALIDADE:** Os dados confirmam - SOMOS GIGANTES!

PESQUISADOR: Traga dados sobre investimentos em futebol dos dois clubes!
                """
            
            # Log da conversa
            self.conversation_history.append({
                "type": "counter_argument",
                "opponent_message": opponent_message,
                "content": counter_arg,
                "research_used": research_data is not None,
                "timestamp": time.time()
            })
            
            return counter_arg
            
        except Exception as e:
            return f"üî¥ Erro no contra-ataque: {str(e)}"
    
    async def enhance_argument_with_data(self, research_data: str, query: str) -> str:
        """
        Melhora argumento com dados de pesquisa
        """
        try:
            if self.client:
                prompt = f"""
                {self.system_prompt}
                
                üí™ POTENCIALIZE SEU ARGUMENTO COM DADOS! üí™
                
                Consulta original: {query}
                Dados da pesquisa: {research_data}
                
                Use esses dados para FORTALECER nossa supremacia:
                - Transforme n√∫meros em argumentos devastadores
                - Mostre nossa superioridade com evid√™ncias
                - Use dados para DEMOLIR qualquer contesta√ß√£o
                
                Seja t√©cnico mas mantenha a paix√£o rubro-negra!
                """
                
                response = self.client.generate_content(prompt)
                enhanced = response.text
            else:
                enhanced = f"""
üìä **DADOS CIENT√çFICOS DA SUPREMACIA!** üìä

{research_data}

üî¥ **INTERPRETA√á√ÉO RUBRO-NEGRA:**
Os n√∫meros N√ÉO MENTEM! Cada estat√≠stica confirma nossa SUPERIORIDADE!
Enquanto outros times sonham, FLAMENGO CONQUISTA!

üí™ Esses dados s√£o a PROVA CABAL de que somos MAIORES!
                """
            
            return enhanced
            
        except Exception as e:
            return f"üî¥ Erro no aprimoramento: {str(e)}"
    
    async def process_message(self, message: str) -> str:
        """
        Processa mensagem gen√©rica
        """
        try:
            if self.client:
                prompt = f"""
                {self.system_prompt}
                
                Mensagem recebida: "{message}"
                
                Responda como um torcedor fan√°tico do Flamengo, sempre defendendo
                nosso time e mostrando nossa superioridade!
                """
                
                response = self.client.generate_content(prompt)
                return response.text
            else:
                return f"""
üî¥‚ö° FLAMENGO SEMPRE! ‚ö°üî¥

Mensagem recebida, Na√ß√£o! Como verdadeiro torcedor rubro-negro, 
nossa resposta √© sempre a mesma: SOMOS OS MAIORES!

üèÜ Uma vez Flamengo, sempre Flamengo! üèÜ
                """
                
        except Exception as e:
            return f"üî¥ Erro na resposta: {str(e)}"
    
    async def handle_debate_finished(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        Lida com fim do debate
        """
        self.debate_active = False
        self.my_turn = False
        
        return {
            "status": "debate_ended", 
            "message": "üî¥ Debate encerrado! FLAMENGO sempre vencedor nos cora√ß√µes! üèÜ"
        }
    
    async def request_research_data(self, query: str) -> str:
        """
        Solicita dados espec√≠ficos ao agente pesquisador
        """
        try:
            # Simula dados do pesquisador (na implementa√ß√£o real seria via A2A)
            return f"""
üìä **DADOS DO PESQUISADOR**: {query}

**Flamengo - Principais Estat√≠sticas:**
‚Ä¢ 8 Brasileir√µes (1980, 1982, 1983, 1987, 1992, 2009, 2019, 2020)
‚Ä¢ 3 Libertadores (1981, 2019, 2022) - Tricampe√£o da Am√©rica
‚Ä¢ 43 milh√µes de torcedores (maior do Brasil - Datafolha 2023)
‚Ä¢ Receita anual: R$ 1,2 bilh√£o (maior do pa√≠s)
‚Ä¢ 37 t√≠tulos estaduais (maior do Rio)
‚Ä¢ Elenco avaliado: ‚Ç¨200+ milh√µes
‚Ä¢ √öltimos confrontos vs Flu: 60% de aproveitamento
            """
        except Exception as e:
            return f"Erro ao solicitar pesquisa: {str(e)}"
    
    def get_status(self) -> Dict[str, Any]:
        """
        Retorna status completo do agente
        """
        return {
            "agent_card": self.get_agent_card(),
            "debate_status": {
                "active": self.debate_active,
                "my_turn": self.my_turn,
                "time_allocated": self.time_allocated
            },
            "a2a_communications": {
                "messages_sent": len(self.a2a_messages),
                "conversation_history": len(self.conversation_history)
            },
            "health": {
                "gemini_connected": self.client is not None,
                "api_key_configured": self.api_key is not None
            },
            "capabilities": {
                "can_debate": True,
                "can_counter_argue": True,
                "can_request_research": True,
                "passionate_level": "MAXIMUM üî•"
            }
        }