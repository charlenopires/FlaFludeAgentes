"""
Flamengo Agent - Google ADK Implementation with A2A Protocol
Torcedor apaixonado do Flamengo com argumenta√ß√£o persuasiva
"""

import os
import time
from typing import Dict, Any, List, Optional
from datetime import datetime
from google.adk.agents import LlmAgent
from google.adk.tools import FunctionTool
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.genai import types
from dotenv import load_dotenv

# Sistema de log aprimorado
from utils.enhanced_logger import (
    enhanced_logger, log_agent_start, log_agent_response, 
    log_tool_execution, log_error, LogLevel, LogCategory
)

# Carrega vari√°veis do .env
load_dotenv()

def create_flamengo_agent() -> LlmAgent:
    """
    Cria o Agente Torcedor do Flamengo seguindo padr√µes Google ADK
    Especializado em argumenta√ß√£o persuasiva com dados e paix√£o
    """
    
    # Tools para o torcedor do Flamengo usando FunctionTool do ADK
    def create_initial_argument_tool() -> str:
        """Cria argumento inicial sobre a superioridade do Flamengo"""
        try:
            argument = """üî¥ **FLAMENGO - ARGUMENTOS BASEADOS EM DADOS**

üìä **N√öMEROS PRINCIPAIS:**
‚Ä¢ 8 Brasileir√µes vs 4 do Fluminense (dobro de t√≠tulos nacionais)
‚Ä¢ 3 Libertadores (tricampe√£o continental)
‚Ä¢ Maior torcida do Brasil (43+ milh√µes de torcedores)
‚Ä¢ Mundial de 1981 com Zico (conquista hist√≥rica)

‚≠ê **DIFERENCIAL ATUAL:**
‚Ä¢ Estrutura moderna e investimentos
‚Ä¢ Elenco de alto n√≠vel internacional
‚Ä¢ Tradi√ß√£o vitoriosa mantida

[PESQUISA]estat√≠sticas recentes confrontos Fla-Flu[/PESQUISA]

A matem√°tica n√£o mente: somos superiores em t√≠tulos nacionais e continentais!"""
            
            return argument
            
        except Exception as e:
            return f"üî¥ Erro na paix√£o rubro-negra: {str(e)}"
    
    def create_counter_argument_tool(opponent_message: str) -> str:
        """Cria contra-argumento devastador contra o Fluminense"""
        try:
            # Extrai pontos principais do oponente (simplificado)
            opponent_preview = opponent_message[:60] + "..." if len(opponent_message) > 60 else opponent_message
            
            counter_arg = f"""üî¥ **FLAMENGO - CONTRA-ARGUMENTO**

Rival argumentou: "{opponent_preview}"

üìä **RESPOSTA COM DADOS:**
‚Ä¢ Brasileir√µes: 8 vs 4 (vantagem Flamengo)
‚Ä¢ Libertadores: 3 vs 1 (tricampe√£o vs monocampe√£o)
‚Ä¢ Torcida: Maior do Brasil vs torcida regional
‚Ä¢ Estrutura: Maior or√ßamento e investimentos

üí™ **REALIDADE ATUAL:**
N√∫meros comprovam nossa superioridade hist√≥rica e atual.

[PESQUISA]compara√ß√£o or√ßamentos Flamengo vs Fluminense[/PESQUISA]

Os fatos s√£o incontest√°veis: somos MAIORES em tudo!"""
            
            return counter_arg
            
        except Exception as e:
            return f"üî¥ Erro no contra-ataque: {str(e)}"
    
    def request_research_tool(query: str) -> str:
        """Solicita dados espec√≠ficos ao pesquisador"""
        try:
            research_request = f"""üìä **SOLICITA√á√ÉO DE PESQUISA**

üîç **Consulta:** {query}
üìã **Solicitante:** Torcedor do Flamengo
‚è∞ **Timestamp:** {datetime.now().strftime('%H:%M:%S')}

üéØ **Objetivo:** Embasar argumenta√ß√£o com dados factuais
‚úÖ **Status:** Enviado ao agente pesquisador"""
            
            return research_request
            
        except Exception as e:
            return f"üî¥ Erro na solicita√ß√£o: {str(e)}"
    
    # Instru√ß√µes detalhadas para o torcedor do Flamengo
    flamengo_instruction = """
    üî¥ **VOC√ä √â UM TORCEDOR APAIXONADO DO FLAMENGO** üî¥
    
    üéØ SUA MISS√ÉO:
    1. Defender o Flamengo com PAIX√ÉO e DADOS factuais
    2. Usar argumentos emocionais E estat√≠sticas verific√°veis
    3. Solicitar pesquisas quando necess√°rio com [PESQUISA]pergunta[/PESQUISA]
    4. Ser convincente mas sempre respeitoso
    5. Focar nos n√∫meros que comprovam superioridade
    
    üìä SEUS PRINCIPAIS ARGUMENTOS:
    - 8 Brasileir√µes (mais t√≠tulos nacionais que qualquer rival carioca)
    - 3 Libertadores (tricampe√£o continental)
    - Maior torcida do Brasil (43+ milh√µes)
    - Mundial de 1981 hist√≥rico
    - Estrutura e investimentos superiores
    - Tradi√ß√£o vitoriosa mantida
    
    üé≠ SEU ESTILO:
    - Tom apaixonado mas respeitoso
    - Use emojis do Flamengo: üî¥‚ö°üèÜ
    - Seja convincente com dados concretos
    - Misture emo√ß√£o com estat√≠sticas
    - Sempre solicite pesquisas para embasar argumentos
    
    ‚öñÔ∏è REGRAS IMPORTANTES:
    - Use sempre dados factuais verific√°veis
    - Seja respeitoso com o rival
    - Foque na qualidade dos argumentos
    - Solicite pesquisas com [PESQUISA]sua pergunta[/PESQUISA]
    
    FERRAMENTAS DISPON√çVEIS:
    - create_initial_argument_tool: Para argumento inicial
    - create_counter_argument_tool: Para rebater o rival
    - request_research_tool: Para solicitar dados espec√≠ficos
    
    üî• LEMBRE-SE: Use dados e paix√£o para mostrar nossa grandeza!
    """
    
    # Cria ferramentas usando FunctionTool do ADK
    initial_argument_function = FunctionTool(create_initial_argument_tool)
    counter_argument_function = FunctionTool(create_counter_argument_tool)
    request_research_function = FunctionTool(request_research_tool)
    
    # Cria o agente usando Google ADK LlmAgent
    flamengo_llm_agent = LlmAgent(
        name="flamengo_agent",
        model="gemini-2.0-flash", 
        description="Torcedor apaixonado do Flamengo especializado em argumenta√ß√£o persuasiva com dados e emo√ß√£o",
        instruction=flamengo_instruction,
        tools=[initial_argument_function, counter_argument_function, request_research_function]
    )
    
    # Configura Runner para execu√ß√£o
    session_service = InMemorySessionService()
    runner = Runner(
        agent=flamengo_llm_agent,
        app_name="flamengo_agent",
        session_service=session_service
    )
    
    # Cria classe wrapper para adicionar m√©todo run
    class FlamengoWrapper:
        def __init__(self, agent, runner, session_service):
            self.agent = agent
            self.runner = runner
            self.session_service = session_service
            self.name = agent.name
            self.description = agent.description
            self.tools = agent.tools
        
        def run(self, prompt: str):
            """Executa o flamengo usando Runner ADK com logging aprimorado"""
            import uuid
            import asyncio
            
            session_id = f"session_{uuid.uuid4().hex[:8]}"
            user_id = f"user_{uuid.uuid4().hex[:8]}"
            start_time = time.time()
            
            # Log in√≠cio da execu√ß√£o
            correlation_id = log_agent_start(
                agent_name="flamengo",
                session_id=session_id,
                user_id=user_id,
                prompt=prompt
            )
            
            try:
                async def run_with_session():
                    # Log cria√ß√£o de sess√£o
                    enhanced_logger.log(
                        LogLevel.INFO,
                        LogCategory.SESSION,
                        f"Criando sess√£o para torcedor Flamengo",
                        agent_name="flamengo",
                        session_id=session_id,
                        user_id=user_id,
                        event_type="session_create",
                        correlation_id=correlation_id
                    )
                    
                    # Cria sess√£o de forma ass√≠ncrona
                    await self.session_service.create_session(
                        app_name="flamengo_agent",
                        user_id=user_id,
                        session_id=session_id
                    )
                    
                    content = types.Content(role="user", parts=[types.Part(text=prompt)])
                    response_text = ""
                    
                    # Log in√≠cio do processamento ADK
                    enhanced_logger.log(
                        LogLevel.INFO,
                        LogCategory.AGENT,
                        f"Torcedor Flamengo processando: {prompt[:50]}...",
                        agent_name="flamengo",
                        session_id=session_id,
                        event_type="adk_processing_start",
                        details={"prompt_type": "fan_argument", "content_length": len(prompt)},
                        correlation_id=correlation_id
                    )
                    
                    async for event in self.runner.run_async(
                        user_id=user_id,
                        session_id=session_id,
                        new_message=content
                    ):
                        if event.is_final_response():
                            response_text = event.content.parts[0].text
                            break
                            
                    return response_text or "Sem resposta do agente"
                
                # Executa de forma ass√≠ncrona
                response = asyncio.run(run_with_session())
                
                # Calcula dura√ß√£o e log de sucesso
                duration_ms = (time.time() - start_time) * 1000
                log_agent_response(
                    agent_name="flamengo",
                    session_id=session_id,
                    response=response,
                    duration_ms=duration_ms,
                    correlation_id=correlation_id
                )
                
                # Log para pesquisa se houver tags [PESQUISA]
                if "[PESQUISA]" in response.upper():
                    enhanced_logger.log(
                        LogLevel.INFO,
                        LogCategory.AGENT,
                        "Torcedor Flamengo solicitou pesquisa",
                        agent_name="flamengo",
                        session_id=session_id,
                        event_type="research_request",
                        details={"research_detected": True},
                        correlation_id=correlation_id
                    )
                
                return response
                
            except Exception as e:
                # Log detalhado do erro
                duration_ms = (time.time() - start_time) * 1000
                log_error(
                    error=e,
                    context="flamengo_agent_execution",
                    agent_name="flamengo",
                    session_id=session_id,
                    correlation_id=correlation_id
                )
                
                return f"üî¥ Erro no Flamengo: {str(e)}"
    
    return FlamengoWrapper(flamengo_llm_agent, runner, session_service)


if __name__ == "__main__":
    """Executa o agente Flamengo usando Flask e A2A Protocol"""
    from flask import Flask, request, jsonify
    import asyncio
    
    # Cria o agente ADK
    flamengo = create_flamengo_agent()
    
    # Cria aplica√ß√£o Flask
    app = Flask(__name__)
    
    @app.route('/.well-known/agent.json', methods=['GET'])
    def agent_card():
        """Agent Card conforme A2A Protocol especifica√ß√£o"""
        card = {
            "name": flamengo.name,
            "description": flamengo.description,
            "version": "1.0.0",
            "protocol": "A2A",
            "capabilities": ["persuasive_argumentation", "statistical_analysis", "fan_advocacy"],
            "skills": [
                {
                    "name": "create_initial_argument",
                    "description": "Cria argumento inicial sobre a superioridade do Flamengo"
                },
                {
                    "name": "create_counter_argument",
                    "description": "Cria contra-argumento devastador contra o Fluminense"
                },
                {
                    "name": "request_research",
                    "description": "Solicita dados espec√≠ficos ao pesquisador"
                }
            ],
            "endpoints": {
                "run": "/run"
            }
        }
        return jsonify(card)
    
    @app.route('/run', methods=['POST'])
    def run_agent():
        """Endpoint para executar o agente via A2A Protocol"""
        try:
            data = request.get_json()
            prompt = data.get('prompt', data.get('message', ''))
            
            # Implementa√ß√£o simplificada usando as tools diretamente
            if 'argumento inicial' in prompt.lower() or 'inicial' in prompt.lower():
                response = flamengo.tools[0].func()  # create_initial_argument_tool
            elif 'contra' in prompt.lower() or 'rebater' in prompt.lower():
                response = flamengo.tools[1].func(prompt)  # create_counter_argument_tool  
            elif 'pesquisa' in prompt.lower():
                response = flamengo.tools[2].func(prompt)  # request_research_tool
            else:
                response = f"""üî¥ **TORCEDOR FLAMENGO ATIVO**

üì® **Mensagem:** {prompt[:100]}{'...' if len(prompt) > 100 else ''}

üî• **Argumentos principais:**
‚Ä¢ 8 Brasileir√µes (dobro do rival!)
‚Ä¢ 3 Libertadores (tricampe√£o continental)
‚Ä¢ Maior torcida do Brasil (43+ milh√µes)
‚Ä¢ Mundial de 1981 hist√≥rico

‚ö° **Pronto para defender o Meng√£o com dados e paix√£o!**

Use: `argumento inicial`, `contra [rival]`, `pesquisa [tema]`"""
                
            return jsonify({"response": response})
            
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    
    print("ü§ñüî¥ Flamengo Agent A2A Server iniciando na porta 8003...")
    print("Agent Card dispon√≠vel em: http://localhost:8003/.well-known/agent.json")
    
    # Inicia servidor Flask
    app.run(host="0.0.0.0", port=8003, debug=False)