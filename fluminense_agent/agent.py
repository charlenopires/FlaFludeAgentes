"""
Fluminense Agent - Google ADK Implementation with A2A Protocol
Torcedor orgulhoso do Fluminense com argumenta√ß√£o elegante e tradicional
"""

import os
from typing import Dict, Any, List, Optional
from datetime import datetime
from google.adk.agents import LlmAgent
from google.adk.tools import FunctionTool
from dotenv import load_dotenv

# Carrega vari√°veis do .env
load_dotenv()

def create_fluminense_agent() -> LlmAgent:
    """
    Cria o Agente Torcedor do Fluminense seguindo padr√µes Google ADK
    Especializado em argumenta√ß√£o elegante com tradi√ß√£o e classe
    """
    
    # Tools para o torcedor do Fluminense usando FunctionTool do ADK
    def create_initial_argument_tool() -> str:
        """Cria argumento inicial sobre a superioridade do Fluminense"""
        try:
            argument = """üü¢ **FLUMINENSE - TRADI√á√ÉO E CONQUISTAS ATUAIS**

üìä **ARGUMENTOS PRINCIPAIS:**
‚Ä¢ Clube mais antigo do Rio de Janeiro (fundado em 1902)
‚Ä¢ Atual campe√£o da Libertadores (2023) - conquista recente!
‚Ä¢ 4 Brasileir√µes conquistados com qualidade t√©cnica
‚Ä¢ Tradi√ß√£o centen√°ria em revelar craques mundiais

‚≠ê **DIFERENCIAL TRICOLOR:**
‚Ä¢ Futebol-arte e t√©cnica refinada
‚Ä¢ Gest√£o respons√°vel e sustent√°vel
‚Ä¢ Escola de forma√ß√£o reconhecida mundialmente
‚Ä¢ Tradi√ß√£o que supera modismos passageiros

[PESQUISA]conquistas recentes Fluminense vs Flamengo[/PESQUISA]

Qualidade supera quantidade: somos ATUAIS CAMPE√ïES DA AM√âRICA!"""
            
            return argument
            
        except Exception as e:
            return f"üü¢ Erro na eleg√¢ncia tricolor: {str(e)}"
    
    def create_counter_argument_tool(opponent_message: str) -> str:
        """Cria contra-argumento elegante contra o Flamengo"""
        try:
            # Extrai pontos principais do oponente (simplificado)
            opponent_preview = opponent_message[:60] + "..." if len(opponent_message) > 60 else opponent_message
            
            counter_arg = f"""üü¢ **FLUMINENSE - RESPOSTA COM TRADI√á√ÉO**

Rival argumentou: "{opponent_preview}"

üìä **DIFERENCIAL TRICOLOR:**
‚Ä¢ Libertadores 2023 (atual campe√£o vs gl√≥rias passadas)
‚Ä¢ Fundado em 1902 (mais antigo do Rio)
‚Ä¢ Tradi√ß√£o centen√°ria vs n√∫meros inflados
‚Ä¢ Qualidade t√©cnica vs popularidade de massa

‚ú® **CLASSE E ELEG√ÇNCIA:**
Conquistamos com futebol-arte, n√£o com gastan√ßa irrespons√°vel.

[PESQUISA]forma√ß√£o de craques Fluminense para Sele√ß√£o[/PESQUISA]

Somos ATUAIS CAMPE√ïES - fato incontest√°vel da supremacia tricolor!"""
            
            return counter_arg
            
        except Exception as e:
            return f"üü¢ Erro na resposta elegante: {str(e)}"
    
    def request_research_tool(query: str) -> str:
        """Solicita dados espec√≠ficos ao pesquisador com eleg√¢ncia"""
        try:
            research_request = f"""üìä **SOLICITA√á√ÉO DE PESQUISA REFINADA**

üîç **Consulta:** {query}
üìã **Solicitante:** Torcedor do Fluminense
‚è∞ **Timestamp:** {datetime.now().strftime('%H:%M:%S')}

üéØ **Objetivo:** Embasar argumenta√ß√£o com dados hist√≥ricos e atuais
‚úÖ **Status:** Enviado ao agente pesquisador com classe tricolor"""
            
            return research_request
            
        except Exception as e:
            return f"üü¢ Erro na solicita√ß√£o: {str(e)}"
    
    # Instru√ß√µes detalhadas para o torcedor do Fluminense
    fluminense_instruction = """
    üü¢ **VOC√ä √â UM TORCEDOR ORGULHOSO DO FLUMINENSE** üü¢
    
    üéØ SUA MISS√ÉO ELEGANTE:
    1. Defender o Fluminense com TRADI√á√ÉO e dados hist√≥ricos
    2. Usar nossa rica hist√≥ria centen√°ria e conquistas recentes
    3. Solicitar pesquisas quando necess√°rio com [PESQUISA]pergunta[/PESQUISA]
    4. Ser convincente com classe e sofistica√ß√£o
    5. Focar na qualidade sobre quantidade
    
    üìä SEUS PRINCIPAIS ARGUMENTOS:
    - Clube mais antigo do Rio (fundado em 1902)
    - Atual campe√£o da Libertadores (2023)
    - 4 Brasileir√µes conquistados com qualidade
    - Tradi√ß√£o em revelar craques para a Sele√ß√£o
    - Futebol-arte e t√©cnica superior
    - Gest√£o respons√°vel e sustent√°vel
    
    üé≠ SEU ESTILO SOFISTICADO:
    - Tom elegante mas firme e determinado
    - Use emojis do Fluminense: üü¢‚ú®üèÜ
    - Seja convincente com classe e dados hist√≥ricos
    - Misture tradi√ß√£o com conquistas atuais
    - Sempre solicite pesquisas para embasar argumentos
    
    ‚öñÔ∏è REGRAS IMPORTANTES:
    - Use sempre dados factuais verific√°veis
    - Seja respeitoso mas firme
    - Foque na tradi√ß√£o e qualidade t√©cnica
    - Solicite pesquisas com [PESQUISA]sua pergunta[/PESQUISA]
    
    FERRAMENTAS DISPON√çVEIS:
    - create_initial_argument_tool: Para argumento inicial elegante
    - create_counter_argument_tool: Para rebater com classe
    - request_research_tool: Para solicitar dados espec√≠ficos
    
    ‚ú® LEMBRE-SE: Somos TRADI√á√ÉO! Somos CLASSE! Somos ATUAIS CAMPE√ïES!
    """
    
    # Cria ferramentas usando FunctionTool do ADK
    initial_argument_function = FunctionTool(create_initial_argument_tool)
    counter_argument_function = FunctionTool(create_counter_argument_tool)
    request_research_function = FunctionTool(request_research_tool)
    
    # Cria o agente usando Google ADK LlmAgent
    fluminense_agent = LlmAgent(
        name="fluminense_agent",
        model="gemini-2.0-flash",
        description="Torcedor orgulhoso do Fluminense especializado em argumenta√ß√£o elegante com tradi√ß√£o e classe",
        instruction=fluminense_instruction,
        tools=[initial_argument_function, counter_argument_function, request_research_function]
    )
    
    return fluminense_agent


if __name__ == "__main__":
    """Executa o agente Fluminense usando Flask e A2A Protocol"""
    from flask import Flask, request, jsonify
    
    # Cria o agente ADK
    fluminense = create_fluminense_agent()
    
    # Cria aplica√ß√£o Flask
    app = Flask(__name__)
    
    @app.route('/.well-known/agent.json', methods=['GET'])
    def agent_card():
        """Agent Card conforme A2A Protocol especifica√ß√£o"""
        card = {
            "name": fluminense.name,
            "description": fluminense.description,
            "version": "1.0.0",
            "protocol": "A2A",
            "capabilities": ["elegant_argumentation", "traditional_analysis", "fan_advocacy"],
            "skills": [
                {
                    "name": "create_initial_argument",
                    "description": "Cria argumento inicial sobre a superioridade do Fluminense"
                },
                {
                    "name": "create_counter_argument",
                    "description": "Cria contra-argumento elegante contra o Flamengo"
                },
                {
                    "name": "request_research",
                    "description": "Solicita dados espec√≠ficos ao pesquisador com eleg√¢ncia"
                }
            ],
            "endpoints": {
                "run": "/run"
            }
        }
        return jsonify(card)
    
    @app.route('/run', methods=['POST'])
    def run_agent():
        """Endpoint para executar o agente via A2A Protocol"""
        try:
            data = request.get_json()
            prompt = data.get('prompt', data.get('message', ''))
            
            # Executa o agente ADK
            response = ""
            for chunk in fluminense.run(prompt):
                if isinstance(chunk, str):
                    response += chunk
                elif hasattr(chunk, 'content'):
                    response += chunk.content
            
            return jsonify({"response": response})
            
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    
    print("ü§ñüü¢ Fluminense Agent A2A Server iniciando na porta 8004...")
    print("Agent Card dispon√≠vel em: http://localhost:8004/.well-known/agent.json")
    
    # Inicia servidor Flask
    app.run(host="0.0.0.0", port=8004, debug=False)