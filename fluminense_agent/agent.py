"""
Fluminense Agent - Google ADK Implementation with A2A Protocol
Torcedor orgulhoso do Fluminense com argumenta√ß√£o elegante e tradicional
"""

import os
import time
from typing import Dict, Any, List, Optional
from datetime import datetime
from google.adk.agents import LlmAgent
from google.adk.tools import FunctionTool
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.genai import types
from dotenv import load_dotenv

# Sistema de log aprimorado
from utils.enhanced_logger import (
    enhanced_logger, log_agent_start, log_agent_response, 
    log_tool_execution, log_error, LogLevel, LogCategory
)

# Carrega vari√°veis do .env
load_dotenv()

def create_fluminense_agent() -> LlmAgent:
    """
    Cria o Agente Torcedor do Fluminense seguindo padr√µes Google ADK
    Especializado em argumenta√ß√£o elegante com tradi√ß√£o e classe
    """
    
    # Tools para o torcedor do Fluminense usando FunctionTool do ADK
    def create_initial_argument_tool() -> str:
        """Cria argumento inicial sobre a superioridade do Fluminense"""
        try:
            argument = """üü¢ **FLUMINENSE - TRADI√á√ÉO E CONQUISTAS ATUAIS**

üìä **ARGUMENTOS PRINCIPAIS:**
‚Ä¢ Clube mais antigo do Rio de Janeiro (fundado em 1902)
‚Ä¢ Atual campe√£o da Libertadores (2023) - conquista recente!
‚Ä¢ 4 Brasileir√µes conquistados com qualidade t√©cnica
‚Ä¢ Tradi√ß√£o centen√°ria em revelar craques mundiais

‚≠ê **DIFERENCIAL TRICOLOR:**
‚Ä¢ Futebol-arte e t√©cnica refinada
‚Ä¢ Gest√£o respons√°vel e sustent√°vel
‚Ä¢ Escola de forma√ß√£o reconhecida mundialmente
‚Ä¢ Tradi√ß√£o que supera modismos passageiros

[PESQUISA]conquistas recentes Fluminense vs Flamengo[/PESQUISA]

Qualidade supera quantidade: somos ATUAIS CAMPE√ïES DA AM√âRICA!"""
            
            return argument
            
        except Exception as e:
            return f"üü¢ Erro na eleg√¢ncia tricolor: {str(e)}"
    
    def create_counter_argument_tool(opponent_message: str) -> str:
        """Cria contra-argumento elegante contra o Flamengo"""
        try:
            # Extrai pontos principais do oponente (simplificado)
            opponent_preview = opponent_message[:60] + "..." if len(opponent_message) > 60 else opponent_message
            
            counter_arg = f"""üü¢ **FLUMINENSE - RESPOSTA COM TRADI√á√ÉO**

Rival argumentou: "{opponent_preview}"

üìä **DIFERENCIAL TRICOLOR:**
‚Ä¢ Libertadores 2023 (atual campe√£o vs gl√≥rias passadas)
‚Ä¢ Fundado em 1902 (mais antigo do Rio)
‚Ä¢ Tradi√ß√£o centen√°ria vs n√∫meros inflados
‚Ä¢ Qualidade t√©cnica vs popularidade de massa

‚ú® **CLASSE E ELEG√ÇNCIA:**
Conquistamos com futebol-arte, n√£o com gastan√ßa irrespons√°vel.

[PESQUISA]forma√ß√£o de craques Fluminense para Sele√ß√£o[/PESQUISA]

Somos ATUAIS CAMPE√ïES - fato incontest√°vel da supremacia tricolor!"""
            
            return counter_arg
            
        except Exception as e:
            return f"üü¢ Erro na resposta elegante: {str(e)}"
    
    def request_research_tool(query: str) -> str:
        """Solicita dados espec√≠ficos ao pesquisador com eleg√¢ncia"""
        try:
            research_request = f"""üìä **SOLICITA√á√ÉO DE PESQUISA REFINADA**

üîç **Consulta:** {query}
üìã **Solicitante:** Torcedor do Fluminense
‚è∞ **Timestamp:** {datetime.now().strftime('%H:%M:%S')}

üéØ **Objetivo:** Embasar argumenta√ß√£o com dados hist√≥ricos e atuais
‚úÖ **Status:** Enviado ao agente pesquisador com classe tricolor"""
            
            return research_request
            
        except Exception as e:
            return f"üü¢ Erro na solicita√ß√£o: {str(e)}"
    
    # Instru√ß√µes detalhadas para o torcedor do Fluminense
    fluminense_instruction = """
    üü¢ **VOC√ä √â UM TORCEDOR ORGULHOSO DO FLUMINENSE** üü¢
    
    üéØ SUA MISS√ÉO ELEGANTE:
    1. Defender o Fluminense com TRADI√á√ÉO e dados hist√≥ricos
    2. Usar nossa rica hist√≥ria centen√°ria e conquistas recentes
    3. Solicitar pesquisas quando necess√°rio com [PESQUISA]pergunta[/PESQUISA]
    4. Ser convincente com classe e sofistica√ß√£o
    5. Focar na qualidade sobre quantidade
    
    üìä SEUS PRINCIPAIS ARGUMENTOS:
    - Clube mais antigo do Rio (fundado em 1902)
    - Atual campe√£o da Libertadores (2023)
    - 4 Brasileir√µes conquistados com qualidade
    - Tradi√ß√£o em revelar craques para a Sele√ß√£o
    - Futebol-arte e t√©cnica superior
    - Gest√£o respons√°vel e sustent√°vel
    
    üé≠ SEU ESTILO SOFISTICADO:
    - Tom elegante mas firme e determinado
    - Use emojis do Fluminense: üü¢‚ú®üèÜ
    - Seja convincente com classe e dados hist√≥ricos
    - Misture tradi√ß√£o com conquistas atuais
    - Sempre solicite pesquisas para embasar argumentos
    
    ‚öñÔ∏è REGRAS IMPORTANTES:
    - Use sempre dados factuais verific√°veis
    - Seja respeitoso mas firme
    - Foque na tradi√ß√£o e qualidade t√©cnica
    - Solicite pesquisas com [PESQUISA]sua pergunta[/PESQUISA]
    
    FERRAMENTAS DISPON√çVEIS:
    - create_initial_argument_tool: Para argumento inicial elegante
    - create_counter_argument_tool: Para rebater com classe
    - request_research_tool: Para solicitar dados espec√≠ficos
    
    ‚ú® LEMBRE-SE: Somos TRADI√á√ÉO! Somos CLASSE! Somos ATUAIS CAMPE√ïES!
    """
    
    # Cria ferramentas usando FunctionTool do ADK
    initial_argument_function = FunctionTool(create_initial_argument_tool)
    counter_argument_function = FunctionTool(create_counter_argument_tool)
    request_research_function = FunctionTool(request_research_tool)
    
    # Cria o agente usando Google ADK LlmAgent
    fluminense_llm_agent = LlmAgent(
        name="fluminense_agent",
        model="gemini-2.0-flash",
        description="Torcedor orgulhoso do Fluminense especializado em argumenta√ß√£o elegante com tradi√ß√£o e classe",
        instruction=fluminense_instruction,
        tools=[initial_argument_function, counter_argument_function, request_research_function]
    )
    
    # Configura Runner para execu√ß√£o
    session_service = InMemorySessionService()
    runner = Runner(
        agent=fluminense_llm_agent,
        app_name="fluminense_agent",
        session_service=session_service
    )
    
    # Cria classe wrapper para adicionar m√©todo run
    class FluminenseWrapper:
        def __init__(self, agent, runner, session_service):
            self.agent = agent
            self.runner = runner
            self.session_service = session_service
            self.name = agent.name
            self.description = agent.description
            self.tools = agent.tools
        
        def run(self, prompt: str):
            """Executa o fluminense usando Runner ADK com logging aprimorado"""
            import uuid
            import asyncio
            
            session_id = f"session_{uuid.uuid4().hex[:8]}"
            user_id = f"user_{uuid.uuid4().hex[:8]}"
            start_time = time.time()
            
            # Log in√≠cio da execu√ß√£o
            correlation_id = log_agent_start(
                agent_name="fluminense",
                session_id=session_id,
                user_id=user_id,
                prompt=prompt
            )
            
            try:
                async def run_with_session():
                    # Log cria√ß√£o de sess√£o
                    enhanced_logger.log(
                        LogLevel.INFO,
                        LogCategory.SESSION,
                        f"Criando sess√£o para torcedor Fluminense",
                        agent_name="fluminense",
                        session_id=session_id,
                        user_id=user_id,
                        event_type="session_create",
                        correlation_id=correlation_id
                    )
                    
                    # Cria sess√£o de forma ass√≠ncrona
                    await self.session_service.create_session(
                        app_name="fluminense_agent",
                        user_id=user_id,
                        session_id=session_id
                    )
                    
                    content = types.Content(role="user", parts=[types.Part(text=prompt)])
                    response_text = ""
                    
                    # Log in√≠cio do processamento ADK
                    enhanced_logger.log(
                        LogLevel.INFO,
                        LogCategory.AGENT,
                        f"Torcedor Fluminense processando com classe: {prompt[:50]}...",
                        agent_name="fluminense",
                        session_id=session_id,
                        event_type="adk_processing_start",
                        details={"prompt_type": "elegant_argument", "content_length": len(prompt)},
                        correlation_id=correlation_id
                    )
                    
                    async for event in self.runner.run_async(
                        user_id=user_id,
                        session_id=session_id,
                        new_message=content
                    ):
                        if event.is_final_response():
                            response_text = event.content.parts[0].text
                            break
                            
                    return response_text or "Sem resposta do agente"
                
                # Executa de forma ass√≠ncrona
                response = asyncio.run(run_with_session())
                
                # Calcula dura√ß√£o e log de sucesso
                duration_ms = (time.time() - start_time) * 1000
                log_agent_response(
                    agent_name="fluminense",
                    session_id=session_id,
                    response=response,
                    duration_ms=duration_ms,
                    correlation_id=correlation_id
                )
                
                # Log para pesquisa se houver tags [PESQUISA]
                if "[PESQUISA]" in response.upper():
                    enhanced_logger.log(
                        LogLevel.INFO,
                        LogCategory.AGENT,
                        "Torcedor Fluminense solicitou pesquisa com eleg√¢ncia",
                        agent_name="fluminense",
                        session_id=session_id,
                        event_type="research_request",
                        details={"research_detected": True},
                        correlation_id=correlation_id
                    )
                
                return response
                
            except Exception as e:
                # Log detalhado do erro
                duration_ms = (time.time() - start_time) * 1000
                log_error(
                    error=e,
                    context="fluminense_agent_execution",
                    agent_name="fluminense",
                    session_id=session_id,
                    correlation_id=correlation_id
                )
                
                return f"üü¢ Erro no Fluminense: {str(e)}"
    
    return FluminenseWrapper(fluminense_llm_agent, runner, session_service)


if __name__ == "__main__":
    """Executa o agente Fluminense usando Flask e A2A Protocol"""
    from flask import Flask, request, jsonify
    import asyncio
    
    # Cria o agente ADK
    fluminense = create_fluminense_agent()
    
    # Cria aplica√ß√£o Flask
    app = Flask(__name__)
    
    @app.route('/.well-known/agent.json', methods=['GET'])
    def agent_card():
        """Agent Card conforme A2A Protocol especifica√ß√£o"""
        card = {
            "name": fluminense.name,
            "description": fluminense.description,
            "version": "1.0.0",
            "protocol": "A2A",
            "capabilities": ["elegant_argumentation", "traditional_analysis", "fan_advocacy"],
            "skills": [
                {
                    "name": "create_initial_argument",
                    "description": "Cria argumento inicial sobre a superioridade do Fluminense"
                },
                {
                    "name": "create_counter_argument",
                    "description": "Cria contra-argumento elegante contra o Flamengo"
                },
                {
                    "name": "request_research",
                    "description": "Solicita dados espec√≠ficos ao pesquisador com eleg√¢ncia"
                }
            ],
            "endpoints": {
                "run": "/run"
            }
        }
        return jsonify(card)
    
    @app.route('/run', methods=['POST'])
    def run_agent():
        """Endpoint para executar o agente via A2A Protocol"""
        try:
            data = request.get_json()
            prompt = data.get('prompt', data.get('message', ''))
            
            # Implementa√ß√£o simplificada usando as tools diretamente
            if 'argumento inicial' in prompt.lower() or 'inicial' in prompt.lower():
                response = fluminense.tools[0].func()  # create_initial_argument_tool
            elif 'contra' in prompt.lower() or 'rebater' in prompt.lower():
                response = fluminense.tools[1].func(prompt)  # create_counter_argument_tool  
            elif 'pesquisa' in prompt.lower():
                response = fluminense.tools[2].func(prompt)  # request_research_tool
            else:
                response = f"""üü¢ **TORCEDOR FLUMINENSE ATIVO**

üì® **Mensagem:** {prompt[:100]}{'...' if len(prompt) > 100 else ''}

‚ú® **Argumentos principais:**
‚Ä¢ Atual campe√£o da Libertadores (2023)
‚Ä¢ Clube mais antigo do Rio (1902)
‚Ä¢ 4 Brasileir√µes com qualidade t√©cnica
‚Ä¢ Tradi√ß√£o centenaria em revelar craques

üèÜ **Somos CLASSE! Somos TRADI√á√ÉO! Somos ATUAIS CAMPE√ïES!**

Use: `argumento inicial`, `contra [rival]`, `pesquisa [tema]`"""
                
            return jsonify({"response": response})
            
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    
    print("ü§ñüü¢ Fluminense Agent A2A Server iniciando na porta 8004...")
    print("Agent Card dispon√≠vel em: http://localhost:8004/.well-known/agent.json")
    
    # Inicia servidor Flask
    app.run(host="0.0.0.0", port=8004, debug=False)